---
apiVersion: v1
kind: Template
labels:
  group: cicd
  template: cicd
message: "The CI/CD infrastructure composed of Jenkins, Nexus Repository and SonarQube services has been created in your project.  Jenkins username/password are admin/${JENKINS_PASSWORD}."
metadata:
  annotations:
    description: "Creates the CI/CD infrastructure with Jenkins, Nexus and SonarQube"
    iconClass: icon-jenkins
    tags: "instant-app,jenkins,nexus,cicd"
  name: cicd
objects:
  -
    apiVersion: v1
    kind: BuildConfig
    metadata:
      labels:
        app: cicd-pipeline
        name: cicd-pipeline
      name: tasks-pipeline
    spec:
      runPolicy: Serial
      source:
        type: None
      strategy:
        jenkinsPipelineStrategy:
          jenkinsfile: |-
              node('maven') {
                 // define commands
                 def mvnCmd = "mvn -s configuration/cicd-settings.xml"
                 def appName = "ola"
                 stage 'Build'
                 git branch: 'cicd', url: 'https://github.com/srinivasa-vasu/ola.git'
                 def v = version()

                 sh "${mvnCmd} clean install -DskipTests=true"

                 stage 'Test and Analysis'
                 parallel (
                     'Test': {
                         // sh "${mvnCmd} test"
                         // step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                     },
                     'Static Analysis': {
                         sh "${mvnCmd} jacoco:report sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                     }
                 )

                 stage 'Push to Nexus'
                 sh "${mvnCmd} deploy -DskipTests=true"

                 stage 'Deploy DEV'
                 sh "rm -rf oc-build && mkdir -p oc-build/target"
                 sh "cp target/*.jar oc-build/target/"
                 sh "cp Dockerfile oc-build/"
                 // clean up. keep the image stream
                 sh "oc project dev"
                 sh "oc delete bc,dc,svc,route -l app=tasks -n dev"
                 // create build. override the exit code since it complains about exising imagestream
                 sh "oc new-build --binary --name=${appName} -l app=${appName} -n dev || true"
                 // build image
                 sh "oc start-build ${appName} --from-dir=oc-build --wait=true -n dev"
                 // deploy image
                 sh "oc new-app ${appName} -l app=${appName},hystrix.enabled=true -n dev"
                 sh "oc expose svc/${appName} -n dev"

                 stage 'Deploy STAGE'
                 input message: "Promote to STAGE?", ok: "Promote"
                 sh "oc project stage"
                 // tag for stage
                 sh "oc tag dev/${appName}:latest stage/${appName}:${v}"
                 // clean up. keep the imagestream
                 sh "oc delete bc,dc,svc,route -l app=${appName} -n stage"
                 // deploy stage image
                 sh "oc new-app ${appName}:${v} -n stage"
                 sh "oc expose svc/${appName} -n stage"
              }

              def version() {
                def matcher = readFile('pom.xml') =~ '<version>(.+)</version>'
                matcher ? matcher[0][1] : null
              }
        type: Generic
    status:
      lastVersion: 0
  -
    apiVersion: v1
    kind: Route
    metadata:
      name: jenkins
    spec:
      to:
        kind: Service
        name: jenkins
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: jenkins
    spec:
      replicas: 1
      selector:
        name: jenkins
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            name: jenkins
        spec:
          containers:
            -
              capabilities: {}
              env:
                -
                  name: JENKINS_PASSWORD
                  value: "${JENKINS_PASSWORD}"
                -
                  name: KUBERNETES_MASTER
                  value: "https://kubernetes.default:443"
                -
                  name: KUBERNETES_TRUST_CERTIFICATES
                  value: "true"
                -
                  name: JNLP_SERVICE_NAME
                  value: jenkins-jnlp
              image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                httpGet:
                  path: /login
                  port: 8080
                initialDelaySeconds: 120
                timeoutSeconds: 3
              name: jenkins
              readinessProbe:
                httpGet:
                  path: /login
                  port: 8080
                initialDelaySeconds: 3
                timeoutSeconds: 3
              resources:
                limits:
                  memory: 1Gi
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                -
                  mountPath: /var/lib/jenkins
                  name: jenkins-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          volumes:
            -
              emptyDir:
                medium: ""
              name: jenkins-data
      triggers:
        -
          imageChangeParams:
            automatic: true
            containerNames:
              - jenkins
            from:
              kind: ImageStreamTag
              name: "jenkins:latest"
              namespace: openshift
            lastTriggeredImage: ""
          type: ImageChange
        -
          type: ConfigChange
  -
    apiVersion: v1
    groupNames: ~
    kind: RoleBinding
    metadata:
      name: default_edit
    roleRef:
      name: edit
    subjects:
      -
        kind: ServiceAccount
        name: default
  -
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: jenkins
      name: jenkins-jnlp
    spec:
      ports:
        -
          name: agent
          nodePort: 0
          port: 50000
          protocol: TCP
          targetPort: 50000
      selector:
        name: jenkins
      sessionAffinity: None
      type: ClusterIP
  -
    apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: "[{\"name\": \"jenkins-jnlp\", \"namespace\": \"\", \"kind\": \"Service\"}]"
        service.openshift.io/infrastructure: "true"
      creationTimestamp: ~
      labels:
        app: jenkins
      name: jenkins
    spec:
      portalIP: ""
      ports:
        -
          name: web
          nodePort: 0
          port: 80
          protocol: TCP
          targetPort: 8080
      selector:
        name: jenkins
      sessionAffinity: None
      type: ClusterIP
  -
    apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: "Sonatype Nexus repository manager's http port"
      labels:
        app: nexus
      name: nexus
    spec:
      ports:
        -
          name: web
          port: 8081
          protocol: TCP
          targetPort: 8081
      selector:
        app: nexus
        deploymentconfig: nexus
      sessionAffinity: None
      type: ClusterIP
  -
    apiVersion: v1
    kind: Route
    metadata:
      labels:
        app: nexus
      name: nexus
    spec:
      port:
        targetPort: web
      to:
        kind: Service
        name: nexus
  -
    apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: nexus
      name: nexus
    spec:
      tags:
        -
          annotations:
            description: "The Nexus Docker image"
            tags: nexus
          from:
            kind: DockerImage
            name: "openshiftdemos/nexus:2.13.0-01"
          importPolicy: {}
          name: 2.13.0-01
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: nexus
      name: nexus
    spec:
      replicas: 1
      selector:
        app: nexus
        deploymentconfig: nexus
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: nexus
            deploymentconfig: nexus
        spec:
          containers:
            -
              image: " "
              imagePullPolicy: Always
              livenessProbe:
                failureThreshold: 5
                httpGet:
                  path: /content/groups/public
                  port: 8081
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              name: nexus
              ports:
                -
                  containerPort: 8081
                  protocol: TCP
              readinessProbe:
                failureThreshold: 5
                httpGet:
                  path: /content/groups/public
                  port: 8081
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              resources:
                limits:
                  memory: 1Gi
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                -
                  mountPath: /opt/nexus-work
                  name: nexus-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          volumes:
            -
              emptyDir: {}
              name: nexus-data
      triggers:
        -
          type: ConfigChange
        -
          imageChangeParams:
            automatic: true
            containerNames:
              - nexus
            from:
              kind: ImageStreamTag
              name: "nexus:2.13.0-01"
          type: ImageChange
    status: {}
  -
    apiVersion: v1
    kind: Service
    metadata:
      creationTimestamp: ~
      labels:
        app: sonarqube
      name: postgresql-sonarqube
    spec:
      ports:
        -
          name: postgresql
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        app: sonarqube
        deploymentconfig: postgresql-sonarqube
      sessionAffinity: None
      type: ClusterIP
  -
    apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/dependencies: "[{\"name\": \"postgresql-sonarqube\", \"namespace\": \"\", \"kind\": \"Service\"}]"
        service.openshift.io/infrastructure: "true"
      labels:
        app: sonarqube
      name: sonarqube
    spec:
      ports:
        -
          name: sonarqube
          port: 9000
          protocol: TCP
          targetPort: 9000
      selector:
        app: sonarqube
        deploymentconfig: sonarqube
      sessionAffinity: None
      type: ClusterIP
  -
    apiVersion: v1
    kind: Route
    metadata:
      annotations:
        description: "Route for SonarQube's http service."
      labels:
        app: sonarqube
      name: sonarqube
    spec:
      to:
        kind: Service
        name: sonarqube
  -
    apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: sonarqube
      name: sonarqube
    spec:
      tags:
        -
          annotations:
            description: "The SonarQube Docker image"
            tags: sonarqube
            version: "6.0"
          from:
            kind: DockerImage
            name: "openshiftdemos/sonarqube:6.0"
          importPolicy: {}
          name: "6.0"
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: sonarqube
        deploymentconfig: postgresql-sonarqube
      name: postgresql-sonarqube
    spec:
      replicas: 1
      selector:
        app: sonarqube
        deploymentconfig: postgresql-sonarqube
      strategy:
        recreateParams:
          timeoutSeconds: 600
        resources: {}
        type: Recreate
      template:
        metadata:
          labels:
            app: sonarqube
            deploymentconfig: postgresql-sonarqube
        spec:
          containers:
            -
              env:
                -
                  name: POSTGRESQL_USER
                  value: "${POSTGRESQL_USER}"
                -
                  name: POSTGRESQL_PASSWORD
                  value: "${SONAR_POSTGRESQL_PASSWORD}"
                -
                  name: POSTGRESQL_DATABASE
                  value: sonar
              image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                tcpSocket:
                  port: 5432
                timeoutSeconds: 1
              name: postgresql
              ports:
                -
                  containerPort: 5432
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - "-i"
                    - "-c"
                    - "psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'"
                failureThreshold: 3
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                limits:
                  memory: 256Mi
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              volumeMounts:
                -
                  mountPath: /var/lib/pgsql/data
                  name: postgresql-data
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            -
              emptyDir: {}
              name: postgresql-data
      test: false
      triggers:
        -
          imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: "postgresql:9.5"
              namespace: openshift
          type: ImageChange
        -
          type: ConfigChange
    status: {}
  -
    apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: sonarqube
        deploymentconfig: sonarqube
      name: sonarqube
    spec:
      replicas: 1
      selector:
        app: sonarqube
        deploymentconfig: sonarqube
      strategy:
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
      template:
        metadata:
          annotations:
            openshift.io/container.sonarqube.image.entrypoint: "[\"./bin/run.sh\"]"
          creationTimestamp: ~
          labels:
            app: sonarqube
            deploymentconfig: sonarqube
        spec:
          containers:
            -
              env:
                -
                  name: SONARQUBE_JDBC_PASSWORD
                  value: "${SONAR_POSTGRESQL_PASSWORD}"
                -
                  name: SONARQUBE_JDBC_URL
                  value: "jdbc:postgresql://postgresql-sonarqube/sonar"
                -
                  name: SONARQUBE_JDBC_USERNAME
                  value: "${POSTGRESQL_USER}"
              image: " "
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 9000
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                timeoutSeconds: 5
              name: sonarqube
              ports:
                -
                  containerPort: 9000
                  protocol: TCP
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /
                  port: 9000
                initialDelaySeconds: 60
                periodSeconds: 20
                successThreshold: 1
                timeoutSeconds: 5
              resources:
                limits:
                  memory: 2Gi
              terminationMessagePath: /dev/termination-log
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      triggers:
        -
          type: ConfigChange
        -
          imageChangeParams:
            automatic: true
            containerNames:
              - sonarqube
            from:
              kind: ImageStreamTag
              name: "sonarqube:6.0"
          type: ImageChange
    status: {}
parameters:
  -
    description: "Password for the Jenkins user."
    displayName: "Jenkins Password"
    name: JENKINS_PASSWORD
    required: true
    value: password
  -
    description: "Username for PostgreSQL backend"
    displayName: "PostgreSQL User"
    from: "user[A-Z0-9]{3}"
    generate: expression
    name: POSTGRESQL_USER
    required: true
  -
    description: "Password for SonarQube Server PostgreSQL backend"
    displayName: "SonarQube's PostgreSQL Password"
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: SONAR_POSTGRESQL_PASSWORD
    required: true
