---
- name: Install Helloworld-MSA in OpenShift (CDK)
  hosts: localhost
  vars_files:
    - vars.yml
  tasks:
    - name: Verify if variables are set
      fail:
        msg: "Target directory is not defined. Please edit vars.yml"
      when: workdir is undefined

    - name: Login in OpenShift as administrator
      shell: "oc login --insecure-skip-tls-verify=true -u {{ admin_username }} -p {{ admin_password }} {{ openshift }}"
      tags:
        - openshift
        - admin

    - name: Adjust SCC
      shell: "oc patch scc restricted -p '{\"runAsUser\":{\"type\":\"RunAsAny\"},\"fsGroup\":{\"type\":\"RunAsAny\"}}'"
      when: adjust_scc

    - name: Create Workdir
      file:
        path: "{{ workdir }}"
        state: directory

    - name: Checkout source code from Github
      git:
        repo: "https://github.com/redhat-helloworld-msa/{{ item.name }}"
        dest: "{{ workdir }}/{{ item.name }}"
        update: yes
      with_items: "{{ msa_projects }}"
      when: "{{ clone_modules }}"
      tags:
        - git

    - name: Compile Java Projects
      shell: "mvn -f {{ workdir }}/{{ item.name }}/pom.xml package"
      with_items: "{{ msa_projects }}"
      when: "item.project == 'java'"
      tags:
        - compile

    - name: NPM install NodeJS Projects
      shell: "npm --prefix {{ workdir }}/{{ item.name }} install {{ workdir }}/{{ item.name }}"
      with_items: "{{ msa_projects }}"
      when: "item.project == 'node'"
      tags:
        - compile

    - name: Login in OpenShift
      shell: "oc login --insecure-skip-tls-verify=true -u {{ username }} -p {{ password }} {{ openshift }}"
      tags:
        - openshift

    - name: Create a new OpenShift project
      shell: "oc new-project {{ project_name }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift

    - name: Define OpenShift project
      shell: "oc project {{ project_name }}"
      tags:
        - openshift

    - name: Create OpenShift new-build
      shell: "oc new-build --binary --name={{ item.name }} -l app={{ item.name }}"
      register: command_result
      with_items: "{{ msa_projects }}"
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift

    - name: Build and Deploy OpenShift images from the sources
      shell: "oc start-build {{ item.name }} --from-dir={{ workdir }}/{{ item.name }} --follow"
      with_items: "{{ msa_projects }}"
      tags:
        - openshift
        - build

    - name: Create OpenShift applications from previously created images
      shell: "oc new-app {{ item.name }} -l app={{ item.name }}{{ (item.hystrix == True) | ternary(',hystrix.enabled=true','') }}"
      register: command_result
      with_items: "{{ msa_projects }}"
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift

    - name: Expose OpenShift applications
      shell: "oc expose service {{ item.name }} --hostname={{ item.name }}-{{ project_name }}.{{ domain }}"
      register: command_result
      with_items: "{{ msa_projects }}"
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift

    - name: Define Frontend domain
      shell: "oc env dc/frontend OS_SUBDOMAIN={{ domain }}"
      tags:
        - openshift

    - name: Create OpenShift Readiness Probe for applications
      shell: "oc set probe dc/{{ item.name }} --readiness --get-url={{ item.probe }}"
      register: command_result
      with_items: "{{ msa_projects }}"
      # Avoid projects without probe
      when: "item.probe != False"
      tags:
        - openshift

    - name: Enable Jolokia for applications
      shell: "oc env dc/{{ item.name }} AB_ENABLED=jolokia; oc patch dc/{{ item.name }} -p '{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"{{ item.name }}\",\"ports\":[{\"containerPort\": 8778,\"name\":\"jolokia\"}]}]}}}}'"
      register: command_result
      with_items: "{{ msa_projects }}"
      # Avoid  no Jolokia projects
      when: "item.jolokia != False"
      tags:
        - openshift

    - name: Install Kubeflix
      shell: "oc env dc/frontend ENABLE_HYSTRIX=true; oc create -f http://central.maven.org/maven2/io/fabric8/kubeflix/packages/kubeflix/1.0.17/kubeflix-1.0.17-kubernetes.yml && oc new-app kubeflix && oc expose service hystrix-dashboard --port=8080 --hostname=hystrix-dashboard-{{ project_name }}.{{ domain }} && oc policy add-role-to-user admin system:serviceaccount:{{ project_name }}:turbine"
      when: "{{ deploy_hystrix }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - hystrix

    - name: Install Kubernetes ZipKin
      shell: "oc env dc/frontend ENABLE_ZIPKIN=true; oc create -f http://repo1.maven.org/maven2/io/fabric8/zipkin/zipkin-starter-minimal/0.0.8/zipkin-starter-minimal-0.0.8-kubernetes.yml &&  oc expose service zipkin-query --hostname=zipkin-query-{{ project_name }}.{{ domain }}"
      when: "{{ deploy_zipkin }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - opentracing
        - zipkin

    - name: Install Hawkular APM
      shell: "oc create -f https://raw.githubusercontent.com/jboss-dockerfiles/hawkular-apm/master/openshift-templates/hawkular-apm-server-deployment.yml"
      register: command_result
      when: "{{ deploy_hawkular_apm }}"
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - opentracing
        - hawkular

    #Install Jenkins
    - name: Login in OpenShift as administrator
      shell: "oc login --insecure-skip-tls-verify=true -u {{ admin_username }} -p {{ admin_password }} {{ openshift }}"
      when: "{{ deploy_jenkins }}"
      tags:
        - openshift
        - jenkins
        - admin

    - name: Define project=openshift
      shell: "oc project openshift"
      when: "{{ deploy_jenkins }}"
      tags:
        - openshift
        - jenkins
        - admin

    - name: Create custom buildConfig for Jenkins
      shell: "oc create -f https://raw.githubusercontent.com/redhat-helloworld-msa/jenkins/master/custom-jenkins.build.yaml"
      when: "{{ deploy_jenkins }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - jenkins
        - admin

    - name: Build a custom Jenkins instance
      shell: "oc start-build custom-jenkins-build --follow"
      when: "{{ deploy_jenkins }}"
      tags:
        - openshift
        - jenkins
        - build
        - admin

    - name: Login in OpenShift as openshift-dev
      shell: "oc login --insecure-skip-tls-verify=true -u {{ username }} -p {{ password }} {{ openshift }}"
      tags:
        - openshift

    - name: Create a new CI OpenShift project
      shell: "oc new-project ci"
      when: "{{ deploy_jenkins }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - jenkins

    - name: Create a Jenkins application in CI project
      shell: "oc new-app -p MEMORY_LIMIT=1024Mi https://raw.githubusercontent.com/openshift/origin/master/examples/jenkins/jenkins-ephemeral-template.json"
      when: "{{ deploy_jenkins }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - jenkins

# Install SSO

    - name: Create SSO project
      shell: "oc new-project sso"        
      when: "{{ deploy_keycloak }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - sso

    - name: Checkout SSO from Github
      git:
        repo: "https://github.com/redhat-helloworld-msa/sso"
        dest: "{{ workdir }}/sso"
      when: "{{ deploy_keycloak }}"
      tags:
        - openshift
        - sso

    - name: Create Keycloak new-build
      shell: "oc new-build --binary --name=keycloak -l app=keycloak"
      when: "{{ deploy_keycloak }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - sso

    - name: Build and Deploy Keycloak images from the sources
      shell: "oc start-build keycloak --from-dir={{ workdir }}/sso --follow"
      when: "{{ deploy_keycloak }}"
      tags:
        - openshift
        - sso

    - name: Create Keycloak application from previously created images
      shell: "oc new-app keycloak -l app=keycloak"
      when: "{{ deploy_keycloak }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - sso

    - name: Define Keycloak client project and domain
      shell: "oc env dc keycloak OS_SUBDOMAIN={{ domain }} OS_PROJECT={{ project_name }}"
      when: "{{ deploy_keycloak }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - sso

    - name: Expose Keycloak application
      shell: "oc expose service keycloak --port=8080 --hostname=keycloak-sso.{{ domain }}"
      when: "{{ deploy_keycloak }}"
      register: command_result
      failed_when: "'exists' not in command_result.stderr and command_result.rc != 0"
      changed_when: "'exists' not in command_result.stderr"
      tags:
        - openshift
        - sso

    - name: Create Keycloak Readiness Probe
      shell: "oc set probe dc keycloak --readiness --get-url=http://:8080/auth"
      when: "{{ deploy_keycloak }}"
      register: command_result
      tags:
        - openshift
        - sso

    - name: Use OpenShift MSA project
      shell: "oc project {{ project_name }}"
      tags:
        - openshift
        - sso

    - name: Tell microservices where to find the Keycloak server
      shell: "oc env dc {{ item.name }} KEYCLOAK_AUTH_SERVER_URL=http://keycloak-sso.{{ domain }}/auth ENABLE_SSO=true"
      register: command_result
      with_items: "{{ msa_projects }}"
      # Avoid projects without probe
      when: "deploy_keycloak and item.sso_support != False"
      tags:
        - openshift
        - sso

    - name: Use OpenShift MSA project
      shell: "oc project {{ project_name }}"
      tags:
        - openshift
 
